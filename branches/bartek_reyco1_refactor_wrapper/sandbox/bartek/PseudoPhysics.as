package bartek {	import jiglib.geometry.JBox;	import jiglib.geometry.JPlane;	import jiglib.geometry.JSphere;	import jiglib.physics.PhysicsBody;		import org.papervision3d.cameras.CameraType;	import org.papervision3d.materials.ColorMaterial;	import org.papervision3d.materials.WireframeMaterial;	import org.papervision3d.materials.utils.MaterialsList;	import org.papervision3d.objects.parsers.DAE;	import org.papervision3d.objects.primitives.Cube;	import org.papervision3d.objects.primitives.Plane;	import org.papervision3d.objects.primitives.Sphere;	import org.papervision3d.view.BasicView;		import flash.display.StageAlign;	import flash.display.StageQuality;	import flash.display.StageScaleMode;	
	/**	 * @author bartekd	 */	public class PseudoPhysics extends BasicView {		// PhysicsBody - interface implemented for specific engine, 		// but also implemented by RigidBody (has most of its public methods that it has now)		private var box:PhysicsBody;		private var plane:PhysicsBody;		private var sphere:PhysicsBody;				private var physics:Physics;		public function PseudoPhysics() {			stage.quality = StageQuality.LOW;			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			stage.showDefaultContextMenu = false;			stage.stageFocusRect = false;			super(800, 600, true, false, CameraType.TARGET);						camera.x = -1000;						// Create an instance of the physics for the 3d engine used			// PhysicsPapervision3D = implementation of a Physics interface			physics = new PhysicsPapervision3D();						// Still need to create a mesh and a rigidbody that go together			var mb:MaterialsList = new MaterialsList();			mb.addMaterial(new WireframeMaterial(), "all");			var cm:Cube = new Cube(mb, 150, 150, 150, 1, 1, 1);			var cp:JBox = new JBox(150, 150, 150); // A bit lame - 2 times same data (sizes)			box = physics.createBody(cm, cp);			scene.addchild(box.mesh);						// or, we can use a shortcut method 			box = physics.createBox(mb, 150, 150, 150, 1, 1, 1); 			// the PhysicsBody interface has a set of methods to manipulate the object in an easy way			box.x = -100;			box.rotationX = 45; 			box.mass = 1;			// if you need to modify a property specific for the 3d engine, do like that:			box.mesh.material = new ColorMaterial(0xff0000);			box.mesh.useOwnContainer = true;			// but if you do like this:			box.mesh.x = 100; // it wont work... (a bit lame)									var sm:Sphere = new Sphere(new WireframeMaterial(), 100);			var sp:JSphere = new JSphere(100, true);			sphere = physics.createBody(sm, sp);			// or			sphere = physics.createSphere(new WireframeMaterial(), 100); // We can remove the movable paremeter from the constructor...			sphere.setMovable(false); // ...and just use it like this			scene.addchild(sphere.mesh);						var pm:Plane = new Plane(new WireframeMaterial(), 1800, 1800);			var pp:JPlane = new JPlane();			plane = physics.createBody(pm, pp);			// or			plane = physics.createPlane(new WireframeMaterial(), 1800, 1800);			// NOTE: A pv3d plane is more like a JBox with depth = 0, rather than a plane anyway...			// So this method should return an object containing pv3d plane + jbox						// Complex objects:			var pinMesh:DAE = new DAE("pin.dae");			var pinBox:JBox = new JBox(40, 280, 40);			pin = physics.createBody(pinMesh, pinBox);			// no shortcut method here...			scene.addchild(pin);			physics.startSimulation();			startRendering();		}	}}